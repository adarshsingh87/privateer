package main

import (
	"fmt"
	"log"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/evertras/bubble-table/table"
)

type Element string

const (
	columnKeyName    = "name"
	columnKeyElement = "element"

	// This is not a visible column, but is used to attach useful reference data
	// to the row itself for easier retrieval
	columnKeyPokemonData = "pokedata"

	elementNormal   Element = "Normal"
	elementFire     Element = "Fire"
	elementElectric Element = "Electric"
	elementWater    Element = "Water"
	elementPlant    Element = "Plant"
)

type Pokemon struct {
	Name                     string
	Element                  Element
	ConversationCount        int
	PositiveSentimentPercent float32
	NegativeSentimentPercent float32
}

func NewPokemon(name string, element Element, conversationCount int, positiveSentimentPercent float32, negativeSentimentPercent float32) Pokemon {
	return Pokemon{
		Name:                     name,
		Element:                  element,
		ConversationCount:        conversationCount,
		PositiveSentimentPercent: positiveSentimentPercent,
		NegativeSentimentPercent: negativeSentimentPercent,
	}
}

func (p Pokemon) ToRow() table.Row {


	return table.NewRow(table.RowData{
		columnKeyName:    p.Name,
		columnKeyElement: p.Element,

		// This isn't a visible column, but we can add the data here anyway for later retrieval
		columnKeyPokemonData: p,
	})
}

type TableModel struct {
	pokeTable table.Model

	currentPokemonData Pokemon

	lastSelectedEvent table.UserEventRowSelectToggled
}

func NewTableModel() TableModel {
	pokemon := []Pokemon{
		NewPokemon("Pikachu", elementElectric, 2300648, 21.9, 8.54),
		NewPokemon("Eevee", elementNormal, 636373, 26.4, 7.37),
		NewPokemon("Bulbasaur", elementPlant, 352190, 25.7, 9.02),
		NewPokemon("Squirtle", elementWater, 241259, 25.6, 5.96),
		NewPokemon("Blastoise", elementWater, 162794, 19.5, 6.04),
		NewPokemon("Charmander", elementFire, 265760, 31.2, 5.25),
		NewPokemon("Charizard", elementFire, 567763, 25.6, 7.56),
	}

	rows := []table.Row{}

	for _, p := range pokemon {
		rows = append(rows, p.ToRow())
	}

	return TableModel{
		pokeTable: table.New([]table.Column{
			table.NewColumn(columnKeyName, "Name", 13),
			table.NewColumn(columnKeyElement, "Element", 10),
		}).WithRows(rows).
			BorderRounded().
			Focused(true),
		currentPokemonData: pokemon[0],
	}
}

func (m TableModel) Init() tea.Cmd {
	return nil
}

func (m TableModel) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	var (
		cmd  tea.Cmd
		cmds []tea.Cmd
	)

	m.pokeTable, cmd = m.pokeTable.Update(msg)
	cmds = append(cmds, cmd)


	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.String() {
		case "ctrl+c", "esc", "q":
			cmds = append(cmds, tea.Quit)
		case "enter":
			fmt.Println(m.currentPokemonData)
		}

	case Pokemon:
		m.currentPokemonData = msg
	}

	return m, tea.Batch(cmds...)
}

func (m TableModel) View() string {
	return m.pokeTable.View()
}

func temp() {
	p := tea.NewProgram(NewTableModel())

	if err := p.Start(); err != nil {
		log.Fatal(err)
	}
}
